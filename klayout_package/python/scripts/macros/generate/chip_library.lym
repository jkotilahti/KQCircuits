<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description>All chips in the library</description>
 <version/>
 <category>pymacros</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>false</autorun>
 <autorun-early>false</autorun-early>
 <shortcut/>
 <show-in-menu>true</show-in-menu>
 <group-name>Generate</group-name>
 <menu-path>edit_menu.my_group&gt;end("KQCircuits Library").end</menu-path>
 <interpreter>python</interpreter>
 <dsl-interpreter-name/>
 <text># This code is part of KQCircuits
# Copyright (C) 2021 IQM Finland Oy
#
# This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
# License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with this program. If not, see
# https://www.gnu.org/licenses/gpl-3.0.html.
#
# The software distribution should follow IQM trademark policy for open-source software
# (meetiqm.com/developers/osstmpolicy). IQM welcomes contributions to the code. Please see our contribution agreements
# for individuals (meetiqm.com/developers/clas/individual) and organizations (meetiqm.com/developers/clas/organization).


import pya

import kqcircuits.util.macro_prepare as macroprep
from kqcircuits.chips.chip import Chip

libname = Chip.LIBRARY_NAME
library = pya.Library.library_by_name(libname)

(layout, layout_view, cell_view) = macroprep.prep_empty_layout()
top_cell = layout.create_cell("Top Cell")
cell_view.cell_name=top_cell.name     # Shows the new cell

chip_step_x = pya.DVector(12e3, 0)
chip_step_y = pya.DVector(0, -12e3)

for i, pcell_name in enumerate(library.layout().pcell_names()):
    print("generating ", pcell_name)
    cell = layout.create_cell(pcell_name, libname, {"name_chip": pcell_name})
    top_cell.insert(pya.DCellInstArray(cell.cell_index(), pya.DTrans((i%5) *chip_step_x+int(i/5) *chip_step_y)))</text>
</klayout-macro>
