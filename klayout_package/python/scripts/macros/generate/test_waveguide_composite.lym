<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description>Composite waveguide example</description>
 <version/>
 <category>pymacros</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>false</autorun>
 <autorun-early>false</autorun-early>
 <shortcut/>
 <show-in-menu>false</show-in-menu>
 <group-name/>
 <menu-path/>
 <interpreter>python</interpreter>
 <dsl-interpreter-name/>
 <text>

# This code is part of KQCircuits
# Copyright (C) 2021 IQM Finland Oy
#
# This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
# License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with this program. If not, see
# https://www.gnu.org/licenses/gpl-3.0.html.
#
# The software distribution should follow IQM trademark policy for open-source software
# (meetiqm.com/developers/osstmpolicy). IQM welcomes contributions to the code. Please see our contribution agreements
# for individuals (meetiqm.com/developers/clas/individual) and organizations (meetiqm.com/developers/clas/organization).


import pya

import kqcircuits.util.macro_prepare as macroprep
from kqcircuits.elements.waveguide_composite import Node, WaveguideComposite
from kqcircuits.elements.airbridges.airbridge import Airbridge
from kqcircuits.elements.airbridge_connection import AirbridgeConnection
from kqcircuits.elements.waveguide_coplanar_taper import WaveguideCoplanarTaper
from kqcircuits.elements.finger_capacitor_square import FingerCapacitorSquare
from kqcircuits.elements.finger_capacitor_taper import FingerCapacitorTaper
from kqcircuits.elements.waveguide_coplanar_tcross import WaveguideCoplanarTCross

(layout, layout_view, cell_view) = macroprep.prep_empty_layout()
top_cell = layout.create_cell("Top Cell")
cell_view.cell_name=top_cell.name     # Shows the new cell


nodes = [
    Node(pya.DPoint(0, 0)),                                             # Nodes have a position, and optionally
    Node(pya.DPoint(100, 0), WaveguideCoplanarTaper, a=6, b=3),         #   an Element type with parameters.
    Node((200, 0), ab_across=True),                                     # Node position is a DPoint or an (x, y) tuple.
    Node((300, 0), Airbridge),                                          # Airbridge parameters come from WaveguideComposite defaults.
#   Node((400, 0)),                                                     # Waveguides are automatically placed between collinear Elements.
    Node((500, 0), Airbridge, airbridge_type="Airbridge Rectangular"),  # Parameters can be overridden on a per node basis.
    Node((700, -200)),                                                  # Waveguides bend after Elements, if needed.
    Node((500, -200), AirbridgeConnection, a=2, b=2),                   # Airbridges can automatically "taper" if needed.
    Node((400, -200), a=12, b=6),                                       # Empty node does a taper if a and/or b is set.
    Node((300, -200), face_id="t"),                                     # Similary, face_id parameter inserts an "FC-bump".
    Node((200, -200)),                                                  # Elements take orientation from previous node, see next one.
    Node((100, -300), FingerCapacitorSquare, finger_number=4),          # Other elements (with port_a/b) are also supported.
    Node((0, -400), a=6, b=2),                                          # Elements have to be colinear if placed back-to-back!
    Node((-100, -600)),                                                 # Be mindful of geometry, WaveguideCoplanar needs space...
    Node((100, -500), FingerCapacitorTaper),                            # Arbitrary future elements also supported.
    Node((300, -400), n_bridges=1, bridge_length=100),                  # Note that all these are in top face.
    Node((400, -400), face_id="b", connector_type="Single"),            # Elements are positioned at the Nodes coordinates.
    Node((600, -400), n_bridges=2),                                     # n_bridges places that many airbridges across
    Node((800, -400), Airbridge, a=20, b=12),                           # first and last element "kisses" Node, i.e. aligned to the edge.
]

wg = WaveguideComposite.create(layout, nodes=nodes, term1=6, taper_length=31.416)
top_cell.insert(pya.DCellInstArray(wg.cell_index(), pya.DTrans()))

nodes = [
    Node(pya.DPoint(0, -800)),
    Node(pya.DPoint(50,-800), WaveguideCoplanarTCross,
         align=("port_left", "port_right"),                # Specify input and output port to connect
         length_extra_side=100),
#    Node(pya.DPoint(150, 0)),                             # A bend is inserted towards the next point automatically
    Node(pya.DPoint(250, -750)),                           # Specify one point before the next TCross to define it's direction
    Node(pya.DPoint(300, -750), WaveguideCoplanarTCross,
         align=("port_right", "port_left"),                # Reverse port order to change orientation
         inst_name="second_tee",                           # Specify instance name to export element refpoints
         length_extra_side=100),
    Node(pya.DPoint(400, -750)),
    Node(pya.DPoint(500, -750), WaveguideCoplanarTCross,
         align=("port_bottom", "port_right")),             # Ports can be at arbitrary angles if they have corner refpoints
    Node(pya.DPoint(600, -1000)),
    Node(pya.DPoint(600, -1100), face_id="t",
         output_rotation=90),                              # Flip chip connectors can also make corners
    Node(pya.DPoint(400, -1000)),
]

wg = WaveguideComposite.create(layout, nodes=nodes)
top_cell.insert(pya.DCellInstArray(wg.cell_index(), pya.DTrans()))


# Show all hierarchy levels and zoom to fit window
layout_view.max_hier()
layout_view.zoom_fit()</text>
</klayout-macro>
